'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPending = exports.hasDone = void 0;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

exports.createActionCreatorFromPromise = createActionCreatorFromPromise;

var _actionCreators = require('./actionCreators');

var _createAsyncActionsStateChecker = require('./createAsyncActionsStateChecker');

var _createAsyncActionsStateChecker2 = _interopRequireDefault(_createAsyncActionsStateChecker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var hasDone = exports.hasDone = function hasDone(state) {
  for (var _len = arguments.length, checkFor = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    checkFor[_key - 1] = arguments[_key];
  }

  return _createAsyncActionsStateChecker2.default.apply(void 0, [state].concat(checkFor)).hasDone();
};

var isPending = exports.isPending = function isPending(state) {
  for (var _len2 = arguments.length, checkFor = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    checkFor[_key2 - 1] = arguments[_key2];
  }

  return _createAsyncActionsStateChecker2.default.apply(void 0, [state].concat(checkFor)).isPending();
};

function createActionCreatorFromPromise(manageAsyncStateFor, getPromise, actionCreator) {
  var lockIfAlreadyInPending = arguments.length <= 3 || arguments[3] === void 0 ? true : arguments[3];
  var debounce = arguments.length <= 4 || arguments[4] === void 0 ? false : arguments[4];

  if (!manageAsyncStateFor) {
    throw new Error('createActionCreatorFromPromise: manageAsyncStateFor is required,' + 'it can be a function or a string');
  }

  if (!getPromise) {
    throw new Error('createActionCreatorFromPromise: getPromise is required');
  }

  var lastRequestKey = void 0;

  return function () {
    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    return function (dispatch, getState) {
      var key = void 0;
      var group = void 0;
      var asyncStateFor = void 0;

      if (typeof manageAsyncStateFor === 'function') {
        var manageAsyncStateForArgs = args.slice(0);
        manageAsyncStateForArgs.push(getState);
        asyncStateFor = manageAsyncStateFor.apply(void 0, _toConsumableArray(manageAsyncStateForArgs));
      } else {
        asyncStateFor = manageAsyncStateFor;
      }

      if ((typeof asyncStateFor === 'undefined' ? 'undefined' : _typeof(asyncStateFor)) === 'object') {
        key = asyncStateFor.key;
        group = asyncStateFor.group;
      } else if (typeof asyncStateFor === 'string') {
        key = asyncStateFor;
      }

      // use a bool or a string property
      if (lockIfAlreadyInPending !== false) {
        if (typeof lockIfAlreadyInPending === 'boolean' && isPending(getState(), key)) {
          return new Promise(function () {});
        }

        if (typeof lockIfAlreadyInPending === 'string' && isPending(getState(), lockIfAlreadyInPending)) {
          return new Promise(function () {});
        }

        if ((typeof lockIfAlreadyInPending === 'undefined' ? 'undefined' : _typeof(lockIfAlreadyInPending)) === 'object' && lockIfAlreadyInPending.length && isPending.apply(void 0, [getState()].concat(_toConsumableArray(lockIfAlreadyInPending)))) {
          return new Promise(function () {});
        }

        if ((typeof lockIfAlreadyInPending === 'undefined' ? 'undefined' : _typeof(lockIfAlreadyInPending)) === 'object' && typeof lockIfAlreadyInPending.length === 'undefined' && isPending(getState(), lockIfAlreadyInPending)) {
          return new Promise(function () {});
        }
      }

      var _lastRequestKey = new Date().getTime() + (Math.random() + 1000);
      lastRequestKey = _lastRequestKey;

      dispatch((0, _actionCreators.pendingActionCreator)(key, group));

      var promiseArgs = args.slice(0);
      promiseArgs.push(dispatch, getState);

      return getPromise.apply(void 0, _toConsumableArray(promiseArgs)).then(function (d) {
        if (debounce) {
          if (lastRequestKey !== _lastRequestKey) {
            return void 0;
          }
        }

        var doneActionCreatorArgs = args.slice(0);
        doneActionCreatorArgs.push(d, getState);

        dispatch((0, _actionCreators.doneActionCreator)(key, actionCreator.apply(void 0, _toConsumableArray(doneActionCreatorArgs))));

        return d;
      }).catch(function (e) {
        if (debounce) {
          if (lastRequestKey !== _lastRequestKey) {
            return void 0;
          }
        }

        dispatch((0, _actionCreators.failureActionCreator)(key, e));

        return e;
      });
    };
  };
}
//# sourceMappingURL=data:application/json;base64,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LENBQVgsQ0FBZCxDQTFEb0M7QUEyRDFDLGtCQUFZLElBQVosQ0FBaUIsUUFBakIsRUFBMkIsUUFBM0IsRUEzRDBDOztBQTZEMUMsYUFBTyw0Q0FBYyxZQUFkLEVBQ0osSUFESSxDQUNDLFVBQUMsQ0FBRCxFQUFPO0FBQ1gsWUFBSSxRQUFKLEVBQWM7QUFDWixjQUFJLG1CQUFtQixlQUFuQixFQUFvQztBQUN0QyxtQkFBTyxLQUFLLENBQUwsQ0FEK0I7V0FBeEM7U0FERjs7QUFNQSxZQUFNLHdCQUF3QixLQUFLLEtBQUwsQ0FBVyxDQUFYLENBQXhCLENBUEs7QUFRWCw4QkFBc0IsSUFBdEIsQ0FBMkIsQ0FBM0IsRUFBOEIsUUFBOUIsRUFSVzs7QUFVWCxpQkFBUyx1Q0FDUCxHQURPLEVBRVAsK0NBQWlCLHNCQUFqQixDQUZPLENBQVQsRUFWVzs7QUFlWCxlQUFPLENBQVAsQ0FmVztPQUFQLENBREQsQ0FrQkosS0FsQkksQ0FrQkUsVUFBQyxDQUFELEVBQU87QUFDWixZQUFJLFFBQUosRUFBYztBQUNaLGNBQUksbUJBQW1CLGVBQW5CLEVBQW9DO0FBQ3RDLG1CQUFPLEtBQUssQ0FBTCxDQUQrQjtXQUF4QztTQURGOztBQU1BLGlCQUFTLDBDQUFxQixHQUFyQixFQUEwQixDQUExQixDQUFULEVBUFk7O0FBU1osZUFBTyxDQUFQLENBVFk7T0FBUCxDQWxCVCxDQTdEMEM7S0FBeEI7R0FBYixDQVpQO0NBTksiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBwZW5kaW5nQWN0aW9uQ3JlYXRvcixcbiAgZG9uZUFjdGlvbkNyZWF0b3IsXG4gIGZhaWx1cmVBY3Rpb25DcmVhdG9yLFxufSBmcm9tICcuL2FjdGlvbkNyZWF0b3JzJztcbmltcG9ydCBjcmVhdGVBc3luY0FjdGlvbnNTdGF0ZUNoZWNrZXIgZnJvbSAnLi9jcmVhdGVBc3luY0FjdGlvbnNTdGF0ZUNoZWNrZXInO1xuXG5leHBvcnQgY29uc3QgaGFzRG9uZSA9IChzdGF0ZSwgLi4uY2hlY2tGb3IpID0+XG5jcmVhdGVBc3luY0FjdGlvbnNTdGF0ZUNoZWNrZXIoc3RhdGUsIC4uLmNoZWNrRm9yKS5oYXNEb25lKCk7XG5cbmV4cG9ydCBjb25zdCBpc1BlbmRpbmcgPSAoc3RhdGUsIC4uLmNoZWNrRm9yKSA9PlxuY3JlYXRlQXN5bmNBY3Rpb25zU3RhdGVDaGVja2VyKHN0YXRlLCAuLi5jaGVja0ZvcikuaXNQZW5kaW5nKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBY3Rpb25DcmVhdG9yRnJvbVByb21pc2UoXG4gIG1hbmFnZUFzeW5jU3RhdGVGb3IsXG4gIGdldFByb21pc2UsXG4gIGFjdGlvbkNyZWF0b3IsXG4gIGxvY2tJZkFscmVhZHlJblBlbmRpbmcgPSB0cnVlLFxuICBkZWJvdW5jZSA9IGZhbHNlXG4pIHtcbiAgaWYgKCFtYW5hZ2VBc3luY1N0YXRlRm9yKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBjcmVhdGVBY3Rpb25DcmVhdG9yRnJvbVByb21pc2U6IG1hbmFnZUFzeW5jU3RhdGVGb3IgaXMgcmVxdWlyZWQsJHtcbiAgICAnJ31pdCBjYW4gYmUgYSBmdW5jdGlvbiBvciBhIHN0cmluZ2ApO1xuICB9XG5cbiAgaWYgKCFnZXRQcm9taXNlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVBY3Rpb25DcmVhdG9yRnJvbVByb21pc2U6IGdldFByb21pc2UgaXMgcmVxdWlyZWQnKTtcbiAgfVxuXG4gIGxldCBsYXN0UmVxdWVzdEtleTtcblxuICByZXR1cm4gKC4uLmFyZ3MpID0+IChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcbiAgICBsZXQga2V5O1xuICAgIGxldCBncm91cDtcbiAgICBsZXQgYXN5bmNTdGF0ZUZvcjtcblxuICAgIGlmICh0eXBlb2YgbWFuYWdlQXN5bmNTdGF0ZUZvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc3QgbWFuYWdlQXN5bmNTdGF0ZUZvckFyZ3MgPSBhcmdzLnNsaWNlKDApO1xuICAgICAgbWFuYWdlQXN5bmNTdGF0ZUZvckFyZ3MucHVzaChnZXRTdGF0ZSk7XG4gICAgICBhc3luY1N0YXRlRm9yID0gbWFuYWdlQXN5bmNTdGF0ZUZvciguLi5tYW5hZ2VBc3luY1N0YXRlRm9yQXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzeW5jU3RhdGVGb3IgPSBtYW5hZ2VBc3luY1N0YXRlRm9yO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYXN5bmNTdGF0ZUZvciA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGtleSA9IGFzeW5jU3RhdGVGb3Iua2V5O1xuICAgICAgZ3JvdXAgPSBhc3luY1N0YXRlRm9yLmdyb3VwO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGFzeW5jU3RhdGVGb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICBrZXkgPSBhc3luY1N0YXRlRm9yO1xuICAgIH1cblxuICAgIC8vIHVzZSBhIGJvb2wgb3IgYSBzdHJpbmcgcHJvcGVydHlcbiAgICBpZiAobG9ja0lmQWxyZWFkeUluUGVuZGluZyAhPT0gZmFsc2UpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIGxvY2tJZkFscmVhZHlJblBlbmRpbmcgPT09ICdib29sZWFuJyAmJlxuICAgICAgICBpc1BlbmRpbmcoZ2V0U3RhdGUoKSwga2V5KVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoKSA9PiB7fSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIGxvY2tJZkFscmVhZHlJblBlbmRpbmcgPT09ICdzdHJpbmcnICYmXG4gICAgICAgIGlzUGVuZGluZyhnZXRTdGF0ZSgpLCBsb2NrSWZBbHJlYWR5SW5QZW5kaW5nKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoKSA9PiB7fSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIGxvY2tJZkFscmVhZHlJblBlbmRpbmcgPT09ICdvYmplY3QnICYmXG4gICAgICAgIGxvY2tJZkFscmVhZHlJblBlbmRpbmcubGVuZ3RoICYmXG4gICAgICAgIGlzUGVuZGluZyhnZXRTdGF0ZSgpLCAuLi5sb2NrSWZBbHJlYWR5SW5QZW5kaW5nKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoKSA9PiB7fSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIGxvY2tJZkFscmVhZHlJblBlbmRpbmcgPT09ICdvYmplY3QnICYmXG4gICAgICAgIHR5cGVvZiBsb2NrSWZBbHJlYWR5SW5QZW5kaW5nLmxlbmd0aCA9PT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgaXNQZW5kaW5nKGdldFN0YXRlKCksIGxvY2tJZkFscmVhZHlJblBlbmRpbmcpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCgpID0+IHt9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBfbGFzdFJlcXVlc3RLZXkgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpICsgKE1hdGgucmFuZG9tKCkgKyAxMDAwKTtcbiAgICBsYXN0UmVxdWVzdEtleSA9IF9sYXN0UmVxdWVzdEtleTtcblxuICAgIGRpc3BhdGNoKHBlbmRpbmdBY3Rpb25DcmVhdG9yKGtleSwgZ3JvdXApKTtcblxuICAgIGNvbnN0IHByb21pc2VBcmdzID0gYXJncy5zbGljZSgwKTtcbiAgICBwcm9taXNlQXJncy5wdXNoKGRpc3BhdGNoLCBnZXRTdGF0ZSk7XG5cbiAgICByZXR1cm4gZ2V0UHJvbWlzZSguLi5wcm9taXNlQXJncylcbiAgICAgIC50aGVuKChkKSA9PiB7XG4gICAgICAgIGlmIChkZWJvdW5jZSkge1xuICAgICAgICAgIGlmIChsYXN0UmVxdWVzdEtleSAhPT0gX2xhc3RSZXF1ZXN0S2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRvbmVBY3Rpb25DcmVhdG9yQXJncyA9IGFyZ3Muc2xpY2UoMCk7XG4gICAgICAgIGRvbmVBY3Rpb25DcmVhdG9yQXJncy5wdXNoKGQsIGdldFN0YXRlKTtcblxuICAgICAgICBkaXNwYXRjaChkb25lQWN0aW9uQ3JlYXRvcihcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgYWN0aW9uQ3JlYXRvciguLi5kb25lQWN0aW9uQ3JlYXRvckFyZ3MpXG4gICAgICAgICkpO1xuXG4gICAgICAgIHJldHVybiBkO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgICBpZiAoZGVib3VuY2UpIHtcbiAgICAgICAgICBpZiAobGFzdFJlcXVlc3RLZXkgIT09IF9sYXN0UmVxdWVzdEtleSkge1xuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkaXNwYXRjaChmYWlsdXJlQWN0aW9uQ3JlYXRvcihrZXksIGUpKTtcblxuICAgICAgICByZXR1cm4gZTtcbiAgICAgIH0pXG4gICAgO1xuICB9O1xufVxuIl19