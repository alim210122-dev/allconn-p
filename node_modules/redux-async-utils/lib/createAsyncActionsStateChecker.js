'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = createAsyncActionsStateChecker;

var _constants = require('./constants');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AsyncActionsStateChecker = function () {
  function AsyncActionsStateChecker() {
    var opt = arguments.length <= 0 || arguments[0] === void 0 ? {} : arguments[0];

    _classCallCheck(this, AsyncActionsStateChecker);

    this.allDone = null;
    this.errors = null;
    this.asyncActionsState = null;

    this.allDone = opt.allDone;
    this.errors = opt.errors;
    this.asyncActionsState = opt.asyncActionsState;
  }

  _createClass(AsyncActionsStateChecker, [{
    key: 'hasDone',
    value: function hasDone(checkFor) {
      var _this = this;

      if (!this.asyncActionsState) {
        return this.allDone;
      }

      var done = false;
      if (checkFor) {
        if (this.asyncActionsState[checkFor]) {
          var asyncState = this.asyncActionsState[checkFor].state;
          done = asyncState !== _constants.PENDING;
        }
      } else {
        var keys = Object.keys(this.asyncActionsState);
        done = keys.length > 0 && keys.filter(function (k) {
          return _this.asyncActionsState[k] && _this.asyncActionsState[k].state !== _constants.PENDING && _this.asyncActionsState[k].state !== _constants.INVALIDATED;
        }).length === keys.length;
      }

      return done;
    }
  }, {
    key: 'isPending',
    value: function isPending(checkFor) {
      var _this2 = this;

      if (!this.asyncActionsState) {
        return !this.allDone;
      }

      var pending = false;
      if (checkFor) {
        if (this.asyncActionsState[checkFor]) {
          var asyncState = this.asyncActionsState[checkFor].state;
          pending = asyncState === _constants.PENDING;
        }
      } else {
        var keys = Object.keys(this.asyncActionsState);
        pending = keys.length > 0 && keys.filter(function (k) {
          return _this2.asyncActionsState[k] && _this2.asyncActionsState[k].state === _constants.PENDING;
        }).length > 0;
      }

      return pending;
    }
  }, {
    key: 'getErrors',
    value: function getErrors() {
      var _this3 = this;

      if (!this.asyncActionsState) {
        return this.errors;
      }

      return Object.keys(this.asyncActionsState).filter(function (k) {
        return _this3.asyncActionsState[k] && _this3.asyncActionsState[k].state === _constants.FAILURE;
      }).map(function (k) {
        return _this3.asyncActionsState[k].error;
      });
    }
  }]);

  return AsyncActionsStateChecker;
}();

function createAsyncActionsStateChecker() {
  var store = arguments.length <= 0 || arguments[0] === void 0 ? {} : arguments[0];

  var asyncActionsStateChecker = void 0;
  if (store.asyncActionsState) {
    for (var _len = arguments.length, checkFor = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      checkFor[_key - 1] = arguments[_key];
    }

    if (!checkFor.length) {
      asyncActionsStateChecker = new AsyncActionsStateChecker({
        allDone: store.asyncActionsState.digested === store.asyncActionsState.asyncActionsStates.length,
        errors: store.asyncActionsState.failedActionsIndexes.map(function (i) {
          return store.asyncActionsState.asyncActionsStates[i].error;
        })

      });
    } else {
      (function () {
        var asyncActionsState = {};
        checkFor.forEach(function (k) {
          if ((typeof k === 'undefined' ? 'undefined' : _typeof(k)) === 'object' && k.group) {
            // manage groups
            var value = store.asyncActionsState.groups[k.group];

            if (value && value.length) {
              value.forEach(function (v) {
                var action = store.asyncActionsState.asyncActionsStates[v];
                asyncActionsState[action[_constants.ASYNC_UTILS_STATE_FOR]] = action;
              });
            }
          } else if (typeof k === 'string') {
            var _value = store.asyncActionsState.asyncActionsStates[store.asyncActionsState.indexes[k]];

            asyncActionsState[k] = _value;
          }
        });

        asyncActionsStateChecker = new AsyncActionsStateChecker({
          asyncActionsState: asyncActionsState
        });
      })();
    }
  } else {
    throw new Error('redux-async-utils: createAsyncActionsStateChecker ' + 'requires asyncActionsState reducer to be in the store');
  }

  return asyncActionsStateChecker;
}
//# sourceMappingURL=data:application/json;base64,